{"version":3,"sources":["scripts/main.js"],"names":["rowLength","columnLength","score","button","document","querySelector","startMessage","loseMessage","winMessage","field","getRandomInt","max","Math","floor","random","getRandomProbability","toFixed","addRandomNumber","gameField","emptyCells","i","j","push","length","randomIndex","randomIndexes","renderField","cells","isWin","gameFieldIndex","querySelectorAll","cell","fieldValue","classList","innerHTML","add","showWinMessage","updateScore","isGameOver","contains","replace","innerText","remove","gameScore","hasEmptyCell","buttonHandler","toggle","moveCell","directionI","directionJ","newI","currentI","currentJ","newJ","moveUp","mergeUp","moveDown","mergeDown","moveRight","mergeRight","moveLeft","mergeLeft","move","e","fieldCopy","map","arr","slice","key","isFieldChanged","gameFieldUpdated","addEventListener","body"],"mappings":"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","file":"main.eb1b13d9.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst rowLength = 4;\nconst columnLength = 4;\nlet score = 0;\nconst button = document.querySelector('button');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nlet field = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nbutton.addEventListener('click', buttonHandler);\ndocument.body.addEventListener('keydown', move);\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction getRandomProbability() {\n  return (Math.random() * 1.01).toFixed(2);\n}\n\nfunction addRandomNumber(gameField) {\n  const emptyCells = [];\n\n  for (let i = 0; i < rowLength; i++) {\n    for (let j = 0; j < columnLength; j++) {\n      if (gameField[i][j] === 0) {\n        emptyCells.push([i, j]);\n      }\n    }\n  }\n\n  if (emptyCells.length === 0) {\n    return;\n  }\n\n  const randomIndex = getRandomInt(emptyCells.length);\n  const randomIndexes = emptyCells[randomIndex];\n\n  if (getRandomProbability() < 0.9) {\n    gameField[randomIndexes[0]][randomIndexes[1]] = 2;\n  } else {\n    gameField[randomIndexes[0]][randomIndexes[1]] = 4;\n  }\n}\n\nfunction renderField(gameField) {\n  const cells = document.querySelectorAll('.field-cell');\n  let isWin = false;\n  let gameFieldIndex = 0;\n\n  for (const cell of cells) {\n    const i = Math.floor(gameFieldIndex / rowLength);\n    const j = gameFieldIndex % columnLength;\n    const fieldValue = gameField[i][j];\n\n    gameFieldIndex++;\n\n    cell.classList = 'field-cell';\n\n    if (fieldValue === 0) {\n      cell.innerHTML = '';\n    } else {\n      cell.innerHTML = fieldValue;\n      cell.classList.add(`field-cell--${fieldValue}`);\n    }\n\n    if (fieldValue === 2048) {\n      isWin = true;\n    }\n  }\n\n  if (isWin) {\n    showWinMessage();\n  }\n\n  updateScore(score);\n\n  if (isGameOver(gameField)) {\n    if (button.classList.contains('restart')) {\n      button.classList.replace('restart', 'start');\n      button.innerText = 'Start';\n    }\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction updateScore(gameScore) {\n  const scoreField = document.querySelector('.game-score');\n\n  scoreField.innerHTML = `${gameScore}`;\n}\n\nfunction hasEmptyCell(gameField) {\n  for (let i = 0; i < rowLength; i++) {\n    for (let j = 0; j < columnLength; j++) {\n      if (gameField[i][j] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isGameOver(gameField) {\n  if (hasEmptyCell(gameField)) {\n    return false;\n  }\n\n  for (let i = 0; i < rowLength; i++) {\n    for (let j = 0; j < columnLength - 1; j++) {\n      if (gameField[i][j] === gameField[i][j + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < rowLength - 1; i++) {\n    for (let j = 0; j < columnLength; j++) {\n      if (gameField[i][j] === gameField[i + 1][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction showWinMessage() {\n  winMessage.classList.remove('hidden');\n}\n\nfunction buttonHandler() {\n  field = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n  score = 0;\n  loseMessage.classList.toggle('hidden', true);\n  winMessage.classList.toggle('hidden', true);\n\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerText = 'Restart';\n    startMessage.classList.add('hidden');\n  }\n\n  addRandomNumber(field);\n  addRandomNumber(field);\n  renderField(field);\n}\n\nfunction moveCell(gameField, i, j, directionI, directionJ) {\n  let currentI = i;\n  let currentJ = j;\n  let newI = i + directionI;\n  let newJ = j + directionJ;\n\n  while (newI >= 0 && newI < 4 && newJ >= 0 && newJ < 4\n    && !gameField[newI][newJ]) {\n    gameField[newI][newJ] = gameField[currentI][currentJ];\n    gameField[currentI][currentJ] = 0;\n    currentI = newI;\n    currentJ = newJ;\n    newI += directionI;\n    newJ += directionJ;\n  }\n}\n\nfunction moveUp(gameField) {\n  for (let i = 0; i < rowLength; i++) {\n    for (let j = 0; j < columnLength; j++) {\n      if (!gameField[i][j]) {\n        continue;\n      }\n      moveCell(gameField, i, j, -1, 0);\n    }\n  }\n}\n\nfunction mergeUp(gameField) {\n  for (let i = 0; i < rowLength - 1; i++) {\n    for (let j = 0; j < columnLength; j++) {\n      if (!gameField[i][j]) {\n        continue;\n      }\n\n      if (gameField[i][j] === gameField[i + 1][j]) {\n        gameField[i][j] = gameField[i][j] * 2;\n        score += gameField[i][j];\n        gameField[i + 1][j] = 0;\n      }\n    }\n  }\n}\n\nfunction moveDown(gameField) {\n  for (let i = rowLength - 1; i >= 0; i--) {\n    for (let j = 0; j < columnLength; j++) {\n      if (!gameField[i][j]) {\n        continue;\n      }\n      moveCell(gameField, i, j, 1, 0);\n    }\n  }\n}\n\nfunction mergeDown(gameField) {\n  for (let i = rowLength - 1; i > 0; i--) {\n    for (let j = 0; j < columnLength; j++) {\n      if (!gameField[i][j]) {\n        continue;\n      }\n\n      if (gameField[i][j] === gameField[i - 1][j]) {\n        gameField[i][j] = gameField[i][j] * 2;\n        score += gameField[i][j];\n        gameField[i - 1][j] = 0;\n      }\n    }\n  }\n}\n\nfunction moveRight(gameField) {\n  for (let i = 0; i < rowLength; i++) {\n    for (let j = columnLength - 1; j >= 0; j--) {\n      if (!gameField[i][j]) {\n        continue;\n      }\n      moveCell(gameField, i, j, 0, 1);\n    }\n  }\n\n  return gameField;\n}\n\nfunction mergeRight(gameField) {\n  for (let i = 0; i < rowLength; i++) {\n    for (let j = columnLength - 1; j > 0; j--) {\n      if (!gameField[i][j]) {\n        continue;\n      }\n\n      if (gameField[i][j] === gameField[i][j - 1]) {\n        gameField[i][j] = gameField[i][j] * 2;\n        score += gameField[i][j];\n        gameField[i][j - 1] = 0;\n      }\n    }\n  }\n}\n\nfunction moveLeft(gameField) {\n  for (let i = 0; i < rowLength; i++) {\n    for (let j = 0; j < columnLength; j++) {\n      if (!gameField[i][j]) {\n        continue;\n      }\n      moveCell(gameField, i, j, 0, -1);\n    }\n  }\n}\n\nfunction mergeLeft(gameField) {\n  for (let i = 0; i < rowLength; i++) {\n    for (let j = 0; j < columnLength; j++) {\n      if (!gameField[i][j]) {\n        continue;\n      }\n\n      if (gameField[i][j] === gameField[i][j - 1]) {\n        gameField[i][j] = gameField[i][j] * 2;\n        score += gameField[i][j];\n        gameField[i][j - 1] = 0;\n      }\n    }\n  }\n}\n\nfunction move(e) {\n  if (!button.classList.contains('restart')) {\n    return;\n  }\n\n  const fieldCopy = field.map(function(arr) {\n    return arr.slice();\n  });\n\n  switch (e.key) {\n    case 'ArrowUp':\n      moveUp(field);\n      mergeUp(field);\n      moveUp(field);\n      break;\n\n    case 'ArrowDown':\n      moveDown(field);\n      mergeDown(field);\n      moveDown(field);\n      break;\n\n    case 'ArrowRight':\n      moveRight(field);\n      mergeRight(field);\n      moveRight(field);\n      break;\n\n    case 'ArrowLeft':\n      moveLeft(field);\n      mergeLeft(field);\n      moveLeft(field);\n      break;\n\n    default:\n  }\n\n  if (isFieldChanged(field, fieldCopy)) {\n    addRandomNumber(field);\n  }\n\n  renderField(field);\n}\n\nfunction isFieldChanged(gameField, gameFieldUpdated) {\n  for (let i = 0; i < rowLength; i++) {\n    for (let j = 0; j < columnLength; j++) {\n      if (gameField[i][j] !== gameFieldUpdated[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}